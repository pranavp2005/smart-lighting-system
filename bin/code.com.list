EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
code.com -- emu8086 assembler version: 4.08  
 
[ 4/24/2019  --  11:06:27 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL TINY
[   2]        :                                       
[   3]        :                                       
[   4]    0202: 00 00                                 .DATA
[   5]        :                                       PORTA1 equ 0000h
[   6]        :                                       PORTB1 equ 0002h
[   7]        :                                       PORTC1 equ 0004h
[   8]        :                                       CWREG1 equ 0006h
[   9]        :                                       
[  10]        :                                       PORTA2 equ 0001h
[  11]        :                                       PORTB2 equ 0003h
[  12]        :                                       PORTC2 equ 0005h
[  13]        :                                       CWREG2 equ 0007h
[  14]        :                                       
[  15]        :                                       
[  16]    0204:                                       .CODE
[  17]    0204:                                       .STARTUP
[  18]        :                                       
[  19]    0204:                                       init:
[  20]        :                                       ORG  0000h
[  21]        :                                       
[  22]        :                                       ; This register will serve as internal memory and store the number of people in the room.
[  23]    0102: 00 00                                 MOV  dl, 00h
[  24]        :                                       
[  25]        :                                       ; Set up the first PPI to read from Port A and write to Port B and Port C.
[  26]    0104: 00 00                                 MOV  al, 10010000b
[  27]    0106: 00 00                                 OUT  CWREG1, al
[  28]        :                                       
[  29]        :                                       ; Set up the second PPI to write to Port C [each output line is a row of 3 lights].
[  30]    0108: 00 00                                 MOV  al, 10010010b
[  31]    010A: 00 00                                 OUT  CWREG2, al
[  32]        :                                       
[  33]        :                                       
[  34]        :                                       ; "main" serves as our event loop and the functions check_entry and check_exit will handle the rest.
[  35]    010C:                                       main:
[  36]    010C: 00 00 00                              CALL check_entry
[  37]    010F: 00 00 00                              CALL check_exit
[  38]    0112: 00 00                                 JMP  main
[  39]        :                                       
[  40]        :                                       
[  41]    0114:                                       delay PROC NEAR
[  42]        :                                       ; A small timed delay. The caller should set CX before calling.
[  43]    0114:                                       delay1:
[  44]    0114: 00                                    NOP
[  45]    0115: 00                                    DEC  cx
[  46]    0116: 00 00                                 JNE  delay1
[  47]    0118: 00                                    RET
[  48]        :                                       delay ENDP
[  49]        :                                       
[  50]        :                                       
[  51]    0119:                                       delay_db PROC NEAR
[  52]        :                                       ; A debounce delay mechanism implemented on Port A's pressure sensors (push buttons).
[  53]    0119:                                       delay_db1:
[  54]    0119: 00 00                                 IN   al, PORTA1
[  55]    011B: 00 00                                 CMP  al, 0h
[  56]    011D: 00 00                                 JNE  delay_db1
[  57]    011F: 00                                    RET
[  58]        :                                       delay_db ENDP
[  59]        :                                       
[  60]        :                                       
[  61]    0120:                                       incr_cnt PROC NEAR
[  62]        :                                       ; Increase the count value and update the display.
[  63]    0120: 00 00                                 INC  dl;
[  64]    0122: 00 00                                 MOV  al, dl
[  65]    0124: 00 00                                 OUT  PORTC1, al
[  66]    0126: 00 00 00                              CALL light_rows
[  67]    0129: 00                                    RET
[  68]        :                                       incr_cnt ENDP
[  69]        :                                       
[  70]        :                                       
[  71]    012A:                                       decr_cnt PROC NEAR
[  72]        :                                       ; Decrease the count value and update the display.
[  73]    012A: 00 00                                 DEC  dl;
[  74]    012C: 00 00                                 MOV  al, dl
[  75]    012E: 00 00                                 OUT  PORTC1, al
[  76]    0130: 00 00 00                              CALL light_rows
[  77]    0133: 00                                    RET
[  78]        :                                       decr_cnt ENDP
[  79]        :                                       
[  80]        :                                       
[  81]    0134:                                       open_door PROC NEAR
[  82]        :                                       ; Open the door by turning the stepper motor to 180deg.
[  83]    0134: 00 00                                 MOV  al, 00000001b
[  84]    0136: 00 00                                 OUT  PORTB1, al
[  85]    0138: 00                                    RET
[  86]        :                                       open_door ENDP
[  87]        :                                       
[  88]        :                                       
[  89]    0139:                                       close_door PROC NEAR
[  90]        :                                       ; Close the door by turning the stepper motor to 0deg.
[  91]    0139: 00 00                                 MOV  al, 00000010b
[  92]    013B: 00 00                                 OUT  PORTB1, al
[  93]    013D: 00                                    RET
[  94]        :                                       close_door ENDP
[  95]        :                                       
[  96]        :                                       
[  97]    013E:                                       check_entry PROC NEAR
[  98]        :                                       ; Check to see if the external pressure sensor has been triggered.
[  99]    013E: 00 00                                 IN   al, PORTA1
[ 100]    0140: 00 00                                 CMP  al, 00000001b
[ 101]    0142: 00 00                                 JNE  check_entry4
[ 102]        :                                       
[ 103]        :                                       ; Open the door once the external pressure sensor has been triggered.
[ 104]    0144: 00 00 00                              CALL open_door
[ 105]    0147: 00 00 00                              MOV  cx, 0FFFFh
[ 106]    014A: 00 00 00                              CALL delay
[ 107]        :                                       
[ 108]        :                                       ; Check to see if the internal pressure sensor has been triggered. Provide a small window of time for entry.
[ 109]    014D: 00 00 00                              MOV  cx, 0FFFFh
[ 110]    0150:                                       check_entry1:
[ 111]    0150: 00 00                                 IN   al, PORTA1
[ 112]    0152: 00 00                                 CMP  al, 00000010b
[ 113]    0154: 00 00                                 JE   check_entry2
[ 114]    0156: 00                                    DEC  cx
[ 115]    0157: 00 00                                 JNZ  check_entry1
[ 116]    0159: 00 00                                 JMP  check_entry3
[ 117]        :                                       
[ 118]    015B:                                       check_entry2:
[ 119]        :                                       ; If the person entered then the count should be incremented.
[ 120]    015B: 00 00 00                              CALL incr_cnt
[ 121]        :                                       
[ 122]    015E:                                       check_entry3:
[ 123]        :                                       ; Close the door.
[ 124]    015E: 00 00 00                              CALL close_door
[ 125]    0161:                                       check_entry4:
[ 126]    0161: 00                                    RET
[ 127]        :                                       check_entry ENDP
[ 128]        :                                       
[ 129]        :                                       
[ 130]    0162:                                       check_exit PROC NEAR
[ 131]        :                                       ; Check to see if the external pressure sensor has been triggered.
[ 132]    0162: 00 00                                 IN   al, PORTA1
[ 133]    0164: 00 00                                 CMP  al, 00000010b
[ 134]    0166: 00 00                                 JNE  check_exit4
[ 135]        :                                       
[ 136]        :                                       ; Open the door once the external pressure sensor has been triggered.
[ 137]    0168: 00 00 00                              CALL open_door
[ 138]    016B: 00 00 00                              MOV  cx, 0FFFFh
[ 139]    016E: 00 00 00                              CALL delay
[ 140]        :                                       
[ 141]        :                                       ; Check to see if the internal pressure sensor has been triggered. Provide a small window of time for entry.
[ 142]    0171: 00 00 00                              MOV  cx, 0FFFFh
[ 143]    0174:                                       check_exit1:
[ 144]    0174: 00 00                                 IN   al, PORTA1
[ 145]    0176: 00 00                                 CMP  al, 00000001b
[ 146]    0178: 00 00                                 JE   check_exit2
[ 147]    017A: 00                                    DEC  cx
[ 148]    017B: 00 00                                 JNZ  check_exit1
[ 149]    017D: 00 00                                 JMP  check_exit3
[ 150]        :                                       
[ 151]    017F:                                       check_exit2:
[ 152]        :                                       ; If the person exited then the count should be decremented.
[ 153]    017F: 00 00 00                              CALL decr_cnt
[ 154]        :                                       
[ 155]    0182:                                       check_exit3:
[ 156]        :                                       ; Close the door.
[ 157]    0182: 00 00 00                              CALL close_door
[ 158]    0185:                                       check_exit4:
[ 159]    0185: 00                                    RET
[ 160]        :                                       check_exit ENDP
[ 161]        :                                       
[ 162]    0186:                                       light_rows PROC NEAR
[ 163]        :                                       ; Check to see how many people are in the room (using the value in dl),
[ 164]        :                                       ; then accordingly determine the number of rows that need to be lit up.
[ 165]        :                                       ; start filling from ROW1 onwards.
[ 166]        :                                       ; Our assumption is that the rows seat 5 people each.
[ 167]        :                                       ; Thus the total capacity of the conference room is 5*6 = 30 people.
[ 168]    0186: 00 00                                 MOV  al, 00d
[ 169]        :                                       
[ 170]    0188: 00 00 00                              CMP  dl, 25d
[ 171]    018B: 00 00                                 JLE  light_rows1
[ 172]    018D: 00 00                                 INC  al
[ 173]    018F:                                       light_rows1:
[ 174]    018F: 00 00                                 SHL  al, 1 ; Moving this up by one line would slightly improve speed (heuristic).
[ 175]        :                                       
[ 176]    0191: 00 00 00                              CMP  dl, 20d
[ 177]    0194: 00 00                                 JLE  light_rows2
[ 178]    0196: 00 00                                 INC  al
[ 179]    0198:                                       light_rows2:
[ 180]    0198: 00 00                                 SHL  al, 1
[ 181]        :                                       
[ 182]    019A: 00 00 00                              CMP  dl, 15d
[ 183]    019D: 00 00                                 JLE  light_rows3
[ 184]    019F: 00 00                                 INC  al
[ 185]    01A1:                                       light_rows3:
[ 186]    01A1: 00 00                                 SHL  al, 1
[ 187]        :                                       
[ 188]    01A3: 00 00 00                              CMP  dl, 10d
[ 189]    01A6: 00 00                                 JLE  light_rows4
[ 190]    01A8: 00 00                                 INC  al
[ 191]    01AA:                                       light_rows4:
[ 192]    01AA: 00 00                                 SHL  al, 1
[ 193]        :                                       
[ 194]    01AC: 00 00 00                              CMP  dl, 05d
[ 195]    01AF: 00 00                                 JLE  light_rows5
[ 196]    01B1: 00 00                                 INC  al
[ 197]    01B3:                                       light_rows5:
[ 198]    01B3: 00 00                                 SHL  al, 1
[ 199]        :                                       
[ 200]    01B5: 00 00 00                              CMP  dl, 00d
[ 201]    01B8: 00 00                                 JE  light_rows6
[ 202]    01BA: 00 00                                 INC  al
[ 203]        :                                       
[ 204]    01BC:                                       light_rows6:
[ 205]    01BC: 00 00                                 OUT  PORTC2, al
[ 206]        :                                       
[ 207]    01BE: 00                                    RET
[ 208]        :                                       light_rows ENDP
[ 209]        :                                       
[ 210]        :                                       END
[ 211]        :                                       
[ 212]        :                                       
[ 213]        :                                       ; POSSIBLE OPTIMIZTIONS:
[ 214]        :                                       ; 1. Use a flag/moniter/semaphore to prevent entry/exit race conditions.
[ 215]        :                                       
 
===================================================================================================
 




===================================================================================================
